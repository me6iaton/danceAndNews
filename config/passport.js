// Generated by CoffeeScript 1.6.1
(function() {
  var FacebookStrategy, GoogleStrategy, LocalStrategy, User, VkontakteStrategy, mongoose, passport;

  mongoose = require("mongoose");

  passport = require("passport");

  LocalStrategy = require('passport-local').Strategy;

  FacebookStrategy = require("passport-facebook").Strategy;

  VkontakteStrategy = require("../fork_node_modules/passport-vkontakte-email").Strategy;

  GoogleStrategy = require("passport-google-oauth").OAuth2Strategy;

  User = mongoose.model("User");

  module.exports = function(app) {
    var config;
    config = app.get("passport");
    passport.serializeUser(function(user, done) {
      done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      User.findOne({
        _id: id
      }, function(err, user) {
        done(err, user);
      });
    });
    passport.use(new VkontakteStrategy({
      clientID: config.vkontacte.clientID,
      clientSecret: config.vkontacte.clientSecret,
      callbackURL: config.vkontacte.callbackURL,
      getEmailURL: config.vkontacte.getEmailURL,
      emailField: config.vkontacte.emailField
    }, function(req, accessToken, refreshToken, profile, done) {
      if (req.session.vkontacte.profile.email) {
        profile = req.session.vkontacte.profile;
        User.findOne({
          "email": req.session.vkontacte.profile.email
        }, function(err, user) {
          if (err) {
            return done(err);
          }
          if (!user) {
            user = new User({
              name: profile.displayName,
              username: profile.username,
              email: profile.email,
              avatar: profile.photos[0].value,
              vkontakte: profile._json
            });
            return user.save(function(err) {
              if (err) {
                console.log(err);
              }
              return done(err, user);
            });
          } else {
            if (!user.vkontakte) {
              user.set("vkontakte", profile._json);
              return user.save(function(err) {
                if (err) {
                  console.log(err);
                }
                return done(err, user);
              });
            } else {
              return done(err, user);
            }
          }
        });
      }
    }));
    passport.use(new FacebookStrategy({
      clientID: config.facebook.clientID,
      clientSecret: config.facebook.clientSecret,
      callbackURL: config.facebook.callbackURL
    }, function(accessToken, refreshToken, profile, done) {
      return User.findOne({
        "email": profile.emails[0].value
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          user = new User({
            name: profile.displayName,
            email: profile.emails[0].value,
            username: profile.username,
            avatar: 'https://graph.facebook.com/' + profile.id + '/picture?type=large',
            facebook: profile._json
          });
          user.save(function(err) {
            if (err) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          if (!user.facebook) {
            user.set("facebook", profile._json);
            return user.save(function(err) {
              if (err) {
                console.log(err);
              }
              return done(err, user);
            });
          } else {
            return done(err, user);
          }
        }
      });
    }));
    return passport.use(new GoogleStrategy({
      clientID: config.google.clientID,
      clientSecret: config.google.clientSecret,
      callbackURL: config.google.callbackURL
    }, function(accessToken, refreshToken, profile, done) {
      return User.findOne({
        "email": profile.emails[0].value
      }, function(err, user) {
        if (!user) {
          user = new User({
            name: profile.displayName,
            email: profile.emails[0].value,
            username: profile.username,
            avatar: profile._json.picture,
            google: profile._json
          });
          return user.save(function(err) {
            if (err) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          if (!user.google) {
            user.set("google", profile._json);
            return user.save(function(err) {
              if (err) {
                console.log(err);
              }
              return done(err, user);
            });
          } else {
            return done(err, user);
          }
        }
      });
    }));
  };

}).call(this);
